@startuml


scale 1000 width
package LOBBY <<Rectangle>>
{
   Class LobbyManager
   {
      -readonly string gameVersion
   태 텍스트
      +Button joinButton
      +GameObject playerStoragePre
      +Connect()
   }
   Class PlayerInventory
   {
      +InputManager inputManagerDatabase;
      +GameObject craftSystem;
      +GameObject characterSystem;
      -CraftSystem cS;

      // 인벤토리 게임 오브젝트
      +GameObject inventory;

      // 제작, 케릭터장비창
      -Inventory craftSystemInventory;
      -Inventory characterSystemInventory;

      // 인벤토리 스크립트
      -Inventory mainInventory 
   }

   Protocol Inventory #back:SkyBlue
   {

   }

   Class TrojanHorse
   {
      private ItemOnObject itemOnObject;
      private GameObject EquipmentItemInventory;

      +int playerNumber // 플레이어ID
      // ----------- 타워 ---------------
      +List<int> towerId // 타워고유ID
      +List<GameObject> towerPrefab // 타워 프리팹
      +List<Item> towerItems // 타워DB

      // ----------- 스킬 ---------------
      +List<int> skillId // 스킬고유ID
      +List<Item> skillItems // 스킬DB
   }

   Protocol GoogleCSV #back:SkyBlue
   {

   }

   Class CSVtest
   {
      // 파싱데이터 저장
      +Dictionary<int, List<string>> warriorStatDatas; // 전사 스탯 
      +Dictionary<int, List<string>> wizardStatDatas; // 마법사 스탯
      +Dictionary<int, List<string>> WarriorSkillDatas; // 전사 스킬
      +Dictionary<int, List<string>> WizardSkillDatas; // 마법사 스킬
      +Dictionary<int, List<string>> CommonSkillDatas // 공통스킬
      +Dictionary<int, TowerBlueprint> TowerDic; // 타워
      +Dictionary<int, MinionBlueprint> MinionDic; // 미니언
      +Dictionary<int, BuffBlueprint> BuffDic; // 버프
      +Dictionary<int, List<string>> descDic; // Desc
   }

}

scale 1000 width
package INGAME <<Rectangle>>
{
   scale 2800 width
   package PunLibrary <<Database>> 
   {
      Class MonoBehaviourPun
      {
      
      }
   
      Class MonoBehaviourPunCallbacks
      {
      }
   }

   Class GameManager
   {
      -static GameManager instance 
      +Transform[] tiles; 
      +GameObject[] EnemyPrefabs 
      +int localPlayerIndex
      -SpawnPlayer()
      -SpawnTower()
      -SpawnEnemy()
      +InitTag()
      +OnLeftRoom()
   }

   Class BuffManager
   {
      +List<BuffBlueprint> currentBuffDatas;
      +List<int> currentBuffIds;
      +Dictionary<BuffBlueprint, float> buffDic;
   }

   scale 1000 width
   package Player <<Rectangle>> 
   {
      Protocol PlayerPrefab #back:SkyBlue
      {

      }

      Class PlayerBehaviour
      {
         +static Vector3 CurrentPlayerPos
         +HeroAttackType heroAttackType
         +RotateSpeed
         +float RotateVelocity
         +LayerMask Layer
         -RaycastHit Hit
         +Camera Cam
         +GameObject targetedEnemy
         +bool perfomMeleeAttack = false
         +string EnemyTag
      }

      Class Stat
      {
         +float StartHealth
         +float health
         +float attackDmg
         +float attackSpeed
         +float attackTime
         +float attackRange
         +float MoveSpeed
         -HeroCombat _heroCombatScripts
         +PlayerBehaviour _playerScript
      }

      Class HeroAbility
      {
         +GameObject[] AbilityPrefabs;
         +Transform skillSpawn;
         +SkillCoolTimeManager coolTimeManager;
         -GameObject go;
         -TrojanHorse _trojan;
         -void AbilityQ()
         -void AbilityW()
         -void AbilityE()
         -void AbilityR()
      }
   }

   scale 1000 width
   package Minion <<Rectangle>> 
   {
   
      Protocol MinionPrefab #back:SkyBlue
      {
      
      }

      Class Enemybase
      {
         +public Transform _target;
         -private Transform _PrevTarget;
         -Rigidbody _rigidbody;
         -ESTATE _estate;
      }

      Class MinionBlueprint
      {
         +int Id
         +string Name
         +enum Minion_Type
         +int Target_Recognize_Range;
         +float Attack
         +float Attack_Speed
         +float Attack_Range
         +float Move_Speed
         +float Hp
         +float Exp 
         +Sprite Icon
         +String Desc
      }
   }
   
   Class MinionSpwaner
   {
      +GameObject[] EnemyPrefabs;
      -float elaspedTime;
      -float minionSpawnTime;
      -void ChangeMinion()
      -void BlueSpawnMinion()
      -void RedSpawnMinion()
   }
   
   
   
   scale 2800 width
   package Tower <<Rectangle>> 
   {
   
      Protocol TowerPrefab #back:SkyBlue
      {
      }

      Class Tower
      {
         + TowerBlueprint towerDB;
         - string enemyTag;
         - fire();
      }

      Class TowerBlueprint
      {
         +int Id 
         +string Name 
         +Tower_Type TowerType
         +float Attack 
         +float AttackSpeed
         +float AttackRange 
         +Attack_Range_Type AttackRangeType 
         +float AttackRangeTypeRadius 00344833
         +float MaxHP 
         +List<ScriptableObject> Scriptables 
         +GameObject ObjectPF 
         +Sprite Icon 
         +string Desc
         +AudioClip SoundAttack
         +AudioClip SoundHit
         +AudioClip SoundNormal 
      }
   }
   
   scale 2800 width
   package Skill <<Rectangle>> 
   {
      Protocol SkillPrefab #back:SkyBlue
      {
      }
   
      Class SkillHandler
      {
      #HeroAbility _ability;
      #Stats _stat;
      #PlayerBehaviour _behaviour;
      #PlayerAnimation _ani;
      #string _myTag;
      +float SetDamage()
      +float SetHodingTime()
      +float SetRange()
      +void GetPlayerPos()
      +void GetPlayerStatus()
      +void GetMousePos()
      +void GetAnimation()
      +void SkillDamage()
      #string getMytag()
      +abstract void SkillHoldingTime(float time);
      +abstract void SkillUpdatePosition();
      }
   
      
      Class SkillData
      {
         +int Id 
         +string Name 
         +string Name_Level 
         +int Classification
         +int Rank 
         +int Type 
         +int Value1 
         +int Value2 
         +float Cool_Time 
         +float Range 
         +int Range_Type 
         +int Range_Value1 
         +int Range_Value2 
         +float Holding_Time 
         +int Continuous_Damage 
         +int Continuous_Damage_Hits 
         +int Continuous_Damage_Time 
         +Crowd_Control_Type Crowd_Control_Type 
         +float Crowd_Control_Time 
         +float Crowd_Control_Value 
         +GameObject ObjectPF 
         +BuffData Buff 
         +Sprite Icon 
      }
   
   }

}

TrojanHorse <.. GameManager
TowerBlueprint --> MinionPrefab
MinionPrefab <.. MinionSpwaner
SkillHandler o-- SkillData
SkillPrefab o-- SkillHandler
Enemybase o-- MinionBlueprint

TowerPrefab o-- Tower
Tower o-- TowerBlueprint

PlayerPrefab o-- PlayerBehaviour
PlayerPrefab o-- HeroAbility
PlayerPrefab o-- Stat 

GoogleCSV o-- CSVtest
CSVtest <-- TowerBlueprint
CSVtest <-- SkillData
CSVtest <-- MinionBlueprint
CSVtest <-- Stat
CSVtest <-- TrojanHorse
Tower .. BuffManager
SkillHandler .. BuffManager
HeroAbility o-- SkillPrefab
MinionPrefab o-- Enemybase

Inventory o-- PlayerInventory
PlayerInventory <.. TrojanHorse
LobbyManager <.. TrojanHorse 
@enduml